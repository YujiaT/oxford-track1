new = smooth(n$Rh)
Rh = n$Rh[is.na(n$Rh)]
new = smooth(n$Rh)
Rh
Rh = n$Rh[!is.na(n$Rh)]
Rh
new = smooth(Rh)
plot(Rh)
plot(new)
source("libraries.R")
n = read.csv("xxx.csv")
plot(n$Rh)
Rh = n$Rh[!is.na(n$Rh)]
new = smooth(Rh)
plot(new)
n = read.csv("yyy.csv")
plot(n$Rh)
View(n)
plot(n$RH)
average(n$RH)
mean(n$RH)
Rh = n$RH[!is.na(n$RH)]
mean(Rh)
Rh = n$RH[!is.na(n$RH)]
mean(Rh)
Rh
n = read.csv("yyy.csv")
plot(n$RH)
Rh = n$RH[!is.na(n$RH)]
new = smooth(Rh)
Rh
n = read.csv("yyy.csv")
plot(n$RH)
Rh = n$RH[!is.na(n$RH)]
Rh = Rh[!is.numeric(Rh)]
new = smooth(Rh)
Rh
new = smooth(Rh)
levels(droplevels(Rh))
new = smooth(Rh)
?is.numeric
Rh
length(Rh)
Rh = subset[Rh, Rh != ">"]
Rh = Rh[Rh != ">"]
levels(droplevels(Rh))
new = smooth(Rh)
Rh = Rh[Rh != ""]
levels(droplevels(Rh))
new = smooth(Rh)
is.numeric(Rh)
as.matrix(Rh)
plot(Rh)
as.numeric(Rh)
source("libraries.R")
n = read.csv("yyy.csv")
plot(n$RH)
Rh = n$RH[!is.na(n$RH)]
Rh = Rh[Rh != ">"]
Rh = Rh[Rh != ""]
plot(Rh)
as.numeric(Rh)
new = smooth(Rh)
is.numeric(Rh)
>as.numeric()
?as.numeric
numeric(Rh)
as.numeric(Rh)
o = as.numeric(Rh)
is.numeric(o)
new = smooth(o)
plot(o)
n = read.csv("yyy.csv")
plot(n$RH)
n = read.csv("yyy.csv")
plot(n$RH)
Rh = n$RH[!is.na(n$RH)]
Rh = Rh[Rh != ">"]
Rh = Rh[Rh != ""]
o = as.numeric(Rh)
is.numeric(o)
plot(0)
plot(o)
new = smooth(o)
plot(new)
source("libraries.R")
n = read.csv("yyy.csv")
Rh = n$RH[!is.na(n$RH)]
Rh = Rh[Rh != ">"]
Rh = Rh[Rh != ""]
o = as.numeric(Rh)
is.numeric(o)
plot(o)
new = smooth(o)
plot(new)
?smooth
oo = runmed(o)
oo = runmed(o,3)
plot(o)
new = smooth(o)
plot(new)
plot(oo)
source("libraries.R")
n = read.csv("yyy.csv")
Rh = n$RH[!is.na(n$RH)]
Rh = Rh[Rh != ">"]
Rh = Rh[Rh != ""]
o = as.numeric(Rh)
is.numeric(o)
oo = runmed(o,3)
plot(o)
new = smooth(o)
plot(new)
plot(oo)
oo = runmed(o,5)
plot(o)
new = smooth(o)
plot(new)
plot(oo)
oo = runmed(o,10)
oo = runmed(o,11)
plot(o)
new = smooth(o)
plot(new)
plot(oo)
length(new)
length(o)
length(oo)
oo
new
o
?smooth
data.frame(o,new,oo)
data.frame(o,oo)
x = data.frame(o,oo)
View(x)
source("libraries.R")
n = read.csv("yyy.csv")
Rh = n$RH[!is.na(n$RH)]
Rh = Rh[Rh != ">"]
Rh = Rh[Rh != ""]
o = as.numeric(Rh)
is.numeric(o)
oo = runmed(o,11)
plot(o)
new = smooth(o)
plot(new)
plot(oo)
plot(new)
plot(oo)
plot(o)
plot(new)
plot(o)
plot(new)
plot(oo)
?median filter
install FBN
library(FBN)
medianFilter(o)
library(robfilter)
?despike
??despike
?de-spike
??de-spike
?medfilt
??medfilt
??medfilter
library(FKF)
library("FKF")
install.packages("FKF")
install.packages("FBN")
fkf(o)
source("libraries.R")
install.packages(RUnit)
install.packages("RUnit")
install.packages("RUnit")
source("libraries.R")
source("libraries.R")
n = read.csv("yyy.csv")
Rh = n$RH[!is.na(n$RH)]
Rh = Rh[Rh != ">"]
Rh = Rh[Rh != ""]
o = as.numeric(Rh)
is.numeric(o)
oo = runmed(o,11)
fkf(o)
despike(o)
install.packages("oce")
source("libraries.R")
source("libraries.R")
install.packages("rescale")
despike(o)
plot(despike(o))
?despike
de = despike(o)
length(de)
view(data.frame(o,oo,despike))
view(data.frame(o,oo,de))
a = data.frame(o,oo,de)
View(a)
aa = a[a$o != a$de]
aa = a[a$o != a$de,]
View(aa)
de = despike(o, replace = c("NA"))
length(de)
length(de[!is.na(de) ])
?renmed
?runmed
source("libraries.R")
data = read.csv("eps100a.csv")
eps = read.csv("eps100a.csv")
View(eps)
eps$Kaolinite. = eps$Al2O3/(eps$TOTAL)
View(eps)
eps$Kaolinite. = eps$Al2O3/(eps$TOTAL)*100
eps$Dolomite. = eps$Al2O3/(eps$TOTAL)*100
eps$Dolomite. = eps$CaO/(eps$TOTAL)*100
eps$MgForTalc = eps$MgO - eps$CaO
eps$Talc. = eps$MgForTalc / (eps$TOTAL) *100
?floor
eps$Kaolinite. = round(eps$Al2O3/(eps$TOTAL)*100,3)
eps$Dolomite. = round(eps$CaO/(eps$TOTAL)*100,3)
#rest mg is talc
eps$MgForTalc = eps$MgO - eps$CaO
eps$Talc. = round(eps$MgForTalc / (eps$TOTAL) *100,3)
eps = read.csv("eps100a.csv")
eps$Kaolinite. = round(eps$Al2O3/(eps$TOTAL)*100,2)
eps$Dolomite. = round(eps$CaO/(eps$TOTAL)*100,2)
#rest mg is talc
eps$MgForTalc = eps$MgO - eps$CaO
eps$Talc. = round(eps$MgForTalc / (eps$TOTAL) *100,2)
eps$Talc. = round(eps$MgForTalc / 3* (eps$TOTAL) *100,2)
#rest quartz
eps$remainSi = eps$SiO2 - (eps$Al2O3)*2 -
eps$remainSi = eps$SiO2 - (eps$Al2O3)*2 - (eps$MgForTalc)*(4/3)
eps$remainSi = eps$SiO2 - (eps$Al2O3)*2 - (eps$MgForTalc)*(4/3)
eps$Quartz. = round(eps$remainSi / 3* (eps$TOTAL) *100,2)
eps$Quartz. = round(eps$remainSi /(eps$TOTAL) *100, 2)
eps$Talc. = round(eps$MgForTalc / (eps$TOTAL) *300,2)
eps$Talc. = round(eps$MgForTalc / (3*eps$TOTAL) *100,2)
source("libraries.R")
eps = read.csv("eps100a.csv")
eps$Kaolinite. = round(eps$Al2O3/(eps$TOTAL)*100,2)
eps$Dolomite. = round(eps$CaO/(eps$TOTAL)*100,2)
#rest mg is talc
eps$MgForTalc = eps$MgO - eps$CaO
eps$Talc. = round(eps$MgForTalc / (3*eps$TOTAL) *100,2)
#rest quartz
eps$remainSi = eps$SiO2 - (eps$Al2O3)*2 - (eps$MgForTalc)*(4/3)
eps$Quartz. = round(eps$remainSi /(eps$TOTAL) *100, 2)
eps$MgForTalc = eps$MgO - eps$CaO
eps$Talc. = round(eps$MgForTalc / (eps$TOTAL) *100,2)
#rest quartz
eps$remainSi = eps$SiO2 - (eps$Al2O3) - (eps$MgForTalc)
eps$Quartz. = round(eps$remainSi /(eps$TOTAL) *100, 2)
eps$new  = eps$Talc. + eps$Quartz. + eps$Kaolinite. + eps$Dolomite.
?write.csv
write.csv("eps2.csv")
write.csv(eps, "eps2.csv")
source("libraries.R")
eps = read.csv("eps100a.csv")
eps$Kaolinite. = round(eps$Al2O3/(eps$TOTAL)*100,2)
eps$Dolomite. = round(eps$CaO/(eps$TOTAL)*100,2)
#rest mg is talc
eps$MgForTalc = eps$MgO - eps$CaO
eps$Talc. = round(eps$MgForTalc / (eps$TOTAL) *100,2)
#rest quartz
eps$remainSi = eps$SiO2 - (eps$Al2O3) - (eps$MgForTalc)
eps$Quartz. = round(eps$remainSi /(eps$TOTAL) *100, 2)
eps$new  = eps$Talc. + eps$Quartz. + eps$Kaolinite. + eps$Dolomite.
write.csv(eps, "eps2.csv")
PM = read.csv("PM.csv")
day1 = read.csv("day1.csv")
#no recording time and date!
wind = read.csv("WeatherData.csv")
source("libraries.R")
total = merge(PM, wind)
plot(day1$DateNum, day1$Difference_in_Small)
#wind data: 4/9-4/13
View(day1)
View(wind)
plot(day1$DateNum, day1$SW_Small)
windback = subset(wind, wind$Winddirection == "180")
windfor = subset(wind, wind$Winddirection > 300)
#half of time wind is backwards
#7am - 7pm wind 180 backward
#7pm - 7am wind 315 forward --- should get a large difference
#back means away from the industrial PM source
back = total[total$Winddirection == "180",]
forw = total[total$Winddirection > 300, ]
plot(forw$DateNum, forw$SW_Small)
plot(back$DateNum, back$SW_Small)
plot(back$Difference_in_Small)
summary(back$Difference_in_Small)
summary(forw$Difference_in_Small)
#this is significant!
summary(lm(total$Difference_in_Small ~ total$Winddirection))
#not enough data
#just assume the 7-7 period wind direction is constant for all?
pmfor1 = PM[7:17,]
pmfor1$coverage = 0
summary(pmfor1$Difference_in_Small)
pmfor2 = PM[39:51,]
pmfor2$coverage = 0
summary(pmfor2$Difference_in_Small)
pmfor3 = PM[65:80,]
pmfor3$coverage = 3000
pmfor = rbind(pmfor1,pmfor2,pmfor3)
summary(pmfor3$Difference_in_Small)
pmfor$winddirection = 315
plot(pmfor$coverage, pmfor$Difference_in_Small)
summary(lm(pmfor$Difference_in_Small ~ pmfor$coverage))
pmfor$industryPM = "with industrial PM input"
summary(pmfor$Difference_in_Small)
pmback1 = PM[1:6,]
pmback2 = PM[18:38,]
pmback3 = PM[52:64,]
pmback_control = rbind(pmback1,pmback2,pmback3)
pmback_control$coverage = 0
pmback4 = PM[81:93,]
pmback4$coverage = 3000
pmback = rbind(pmback_control,pmback4)
pmback$industryPM = "without industrial PM input"
pmback$Difference_in_Small = -1 * pmback$Difference_in_Small
plot(pmback$coverage, pmback$Difference_in_Small)
boxplot(pmback$coverage, pmback$Difference_in_Small)
summary(lm(pmback$Difference_in_Small ~ pmback$coverage))
summary(pmback$Difference_in_Small)
pmback$winddirection = 180
pm2 = rbind(pmfor, pmback)
View(pm2)
?match
lmermodel1 <-lmer(pm2$Difference_in_Small ~ pm2$coverage * (1|pm2$winddirection), data=pm2)
anova(lmermodel1,test="Chisq")
summary(lmermodel1)
plot(total$Difference_in_Small)
View(total)
View(PM)
lam = 0.178901*10^-9
d = lam/(2*sin(2.5))
sin(90)
?sin
?degree to radian
?degree
??degree
d = lam/(2* sin(as_radian(theta = 2.5)))
?as_radian
??as_radian
install.packages("aspace")
library(aspace)
d = lam/(2*0.0436
)
d
d = lam/(2*0.0872)
d
0.28/3
lam = 0.17902*10^-9
theta = 2* lam/(0.14)
theta
t = arcsin(theta)*360/(2*pi)
?sin
t = asin(theta)*360/(2*pi)
t
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.14))
t = (asin(theta))*360/(2*pi)
t
asin(theta)
theta
theta = lam/(2*(0.14*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.09*10^-9))
t = (asin(theta))*360/(2*pi)
t
asin(theta)
theta = lam/(2*(0.28*10^-9))
t = (asin(theta))*360/(2*pi)
t
0.22+0.21+0.38
0.81/2
theta = lam/(2*(0.405*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.27*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.7*10^-9))
t = (asin(theta))*360/(2*pi)
t
0.22+0.21+0.22+0.36
1.01/2
1.01/3
lam = 0.17902*10^-9
theta = lam/(2*(0.505*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.337*10^-9))
t = (asin(theta))*360/(2*pi)
t
0.71/2
0.71/3
theta = lam/(2*(0.355*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.237*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.505*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(1*10^-9))
t = (asin(theta))*360/(2*pi)
t
theta = lam/(2*(0.71*10^-9))
t = (asin(theta))*360/(2*pi)
t
asin(0)
asin(pi)
asin(pi/2)
asin(pi/4)
theta = 2*(asin(t))*360/(2*pi)
t
1.51/2
1.51/3
t = lam/(2*(1.51*10^-9))
theta = 2*(asin(t))*360/(2*pi)
t
theta
t = lam/(2*(0.755*10^-9))
theta = 2*(asin(t))*360/(2*pi)
theta
t = lam/(2*(0.503*10^-9))
theta = 2*(asin(t))*360/(2*pi)
theta
lam = 0.17902*10^-9
0.89*lam/(0.0122*cos(0.4310963))
64/(9*sqrt(3))
64/(9*sqrt(3))*(0.1245^3)
52*2/(6.022*(10^23))
1.727/7.92
(1.727/7.92)*(10^8)
(1.727/7.92)*(10^5)
pi/6
(16*pi/3)/(6*18/sqrt(2))
(16*pi/3)/(32/sqrt(2))
data = data.frame(data$name, data$p, data$n, data$e, data#m)
data = data.frame(data$name, data$p, data$n, data$e, data$m)
data = data.frame(data$name, data$p, data$n, data$e, data$m)
data = data.frame(data$name, data$p, data$n, data$e, data$m)
x = data.frame(data$name, data$p, data$n, data$e, data$m)
?data.frame
data = data.frame(row.names = x,p,n,e,m)
data = data.frame(row.names = name,p,n,e,m)
data = data.frame(row.names = 'name','p','n','e','m')
View(data)
setwd("C:/Users/Thinkpad/Desktop/1")
data = read.csv("file:///C:/Users/Thinkpad/Desktop/1/binding energy.csv")
View(data)
data$actualm = 1.007276*data$p
data$actualm = 1.007276*data$p + 1.008664*data$n + 0.00054858*data$e
data$massdis = data$actualm - data$m
data$mdisinKg = data$massdis*1.6605*10^-27
data$Eb = data$mdisinKg*(2.99792*10^8)^2/(data$p+data$n)
data$EbinMev = data$Eb*6.2415*10^12
ln(2)/(4.3*10^10)
?log
loge(2)
(1-x)^(-1)=105/80
1-(105/80)^-1
1-(5.3/3.7)^-1
0.7^-1
1.42*3.7
x= read.csv("28")
x= read.csv("28.csv")
View(x)
x$155f = 1-(x$155/x$b)^-1
x$155f = 1-(x$X155/x$b)^-1
y= read.csv("28.csv")
y$155f = 1-(y$155/y$b)^-1
y$155f = 1-(y$155/y$b)^(-1)
y= read.csv("28.csv")
View(y)
y$s155f = 1-(y$s155/y$b)^(-1)
View(y)
y$s155f = (1-(y$s155/y$b)^(-1))*100
y$s163f = (1-(y$s163/y$b)^(-1))*100
y$s999f = (1-(y$s999/y$b)^(-1))*100
?export
?write.csv
write.csv(y, file = "28f")
write.csv(y, file = "28f.csv")
z = read.csv("28f.csv")
0.06+0.0486*6+2*0.1154+0.0479*2+0.1825
0.7987+0.1825-(0.8607-0.1825)
0.1691- (6*0.0216+6*0.0571)
0.1691- 0.0216 -0.0571
6*0.0216+6*0.0571+2*0.0904+2*0.0804+0.1825
0.7987+0.1537-(0.9963-0.1537)
6*0.0216+6*0.0571+2*0.0904+2*0.0804+0.1537
ans-0.7989
6*0.0216+6*0.0571+2*0.0904+2*0.0804+0.1537 - 0.7989
0.7987-(0.9963-0.1537)
-0.169+0.1537
1/(5.601*10^31)-1/(2.8005*10^31)
(1/(5.601*10^31)-1/(2.8005*10^31))/(-6*10^-50)
2.8005/1.88
-1.88*1.44/2
-1.35*10^31*2.98*2/((2.99792*10^8)^2)
setwd("D:/课程/Spring 2016/Eps 100B/eps")
setwd("D:/课程/Spring 2016/Eps 100B/eps")
